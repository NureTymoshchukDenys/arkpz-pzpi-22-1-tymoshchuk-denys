Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Звіт
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №2
Виконавець:
ст. гр. ПЗПІ-22-1
Тимощук Д.О.
Перевірив:
Сокорчук Ігор Петрович
Харків 2024Мета роботи:
Розробка бази даних для серверної частини програмної системи та
прикладного програмного інтерфейсу
Хід роботи:
1. Розробити будову програмної системи
Було визначено основну структуру програмної системи для управління фермою з
вирощування грибів. Основні компоненти:
• Клієнтська частина: інтерфейс для фізичних і юридичних
Farm осіб.
• Серверна частина: забезпечення взаємодії між клієнтами та базами
вирощування грибів.
• База даних: зберігання інформації про ферми, гриби, користувачів та
коментарі.
Розглянемо Use Case діаграму, щоб побачити основний сценарій використання
у рамках системи. На рисунку 1.1 зображено діаграму Use Case:

Рисунок 1.1 - Use Case Diagram2. Створити ER діаграму даних:
ER-діаграма відображає структуру даних системи, включаючи основні сутності:
Farm
Рисунок 2.1 - ER діаграма даних
• Користувачі (User): атрибути (FaoriteBase, роль, чати, залишений
коментар).
• Бази розведення (Farm): атрибути (ID, дата, опис, час створення ,назва).
• Акаунт (Account): атрибути (пошта, пароль, аватар).
• Чат (Chat): атрибути (ID, відправник, повідомлення).
• Повідомлення (Messsages): атрибути (ID, час відправлення, текст).
• Розробити базу даних (БД) програмної системи
На основі ER-діаграми було створено таблиці з використанням MongoDB:
3. Створити діаграму впровадження:
Діаграма впровадження відображає зв’язки між усіма компонентами системи.
Розглянемо діаграму Deployment Diagram на рисунку 3.1:Рисунок 3.1 - Deployment Diagram
4. Розробити API для взаємодії серверної частини з клієнтами
Використано REST API для забезпечення взаємодії клієнтів із сервером.
Для кращого розуміння роботи програми розглянемо діаграму активності
(Activity Diagram) на рисунку 4.1:
Рисунок 4.1 - Activity Diagram5. Створити програмну реалізацію розробленого API та функцій роботи з
БД:
Для реалізації була обрана система керування базами даних MongoDB.
Об’єкт "User" має зв’язок "один до багатьох" із об’єктом "snailBase". Об’єкт
"Messager" пов'язаний із "User" зв’язком типу "багато до багатьох".
Компоненти проекту організовані структуровано за каталогами відповідно до
кращих практик створення React-додатків. Структурування компонентів
проекту представлено на рисунку 5.1:
Рисунок 5.1 - Впорядкування компонентів проекту
Висновки:
Я здійснив розробку серверної частини програмного забезпечення MushTop. Для
більш наочного подання системи було створено діаграми прецедентів (Use Case
Diagram), розгортання (Deployment Diagram), активностей (Activity Diagram), а
також модель сутність-зв’язок (Entity–Relationship Model)Додаток А
Код Програми
Код файлу auth.routes.js
1. const Router = require("express")
2. const config = require("config")
3. const User = require("../models/User")
4. const router = new Router()
5. const { check, validationResult } = require("express-validator")
6. const bcrypt = require("bcryptjs")
7. const jwt = require("jsonwebtoken")
8. const authMiddleware = require("../middleware/auth.middleware")
9.
10.
router.post(
11.
"/registration",
12.
[
13.
check("email", "Uncorrected email").isEmail(),
14.
check(
15.
"password",
16.
"Password must be longer than 3 and shorter than 12"
17.
).isLength({ min: 3, max: 12 }),
18.
],
19.
async (req, res) => {
20.
try {
21.
const errors = validationResult(req)
22.
23.
if (!errors.isEmpty()) {
24.
return res.status(400).json({ message: "Uncorrected request" },
errors)
25.
}
26.
27.
const { email, password } = req.body
28.
29.
const candidate = await User.findOne({ email })
30.
31.
if (candidate) {
32.
return req
33.
.status(400)
34.
.json({ message: `User with email ${email} already exist` })
35.
}
36.
37.
const hashPassword = await bcrypt.hash(password, 8)
38.
const user = new User({ email, password: hashPassword })
39.
await user.save()
40.
41.
return res.json({ message: "User was created" })
42.
} catch (e) {
43.
console.log(e)
44.
res.send({ message: "Server error" })
45.
}
46.
}
47.
)48.
{
router.post("/login", async (req, res) => {
try {
const { email, password } = req.body
const user = await User.findOne({ email })
if (!user) {
return res.status(404).json({ message: "User not found" })
}
const isPassValid = bcrypt.compareSync(password, user.password)
if (!isPassValid) {
return res.status(400).json({ message: "Invalid password" })
}
const token = jwt.sign({ id: user.id }, config.get("secretKey"),
expiresIn: "1h",
})
return res.json({
token,
user: {
id: user.id,
email: user.email,
avatar: user.avatar,
},
})
} catch (e) {
console.log(e)
res.send({ message: "Server error" })
}
})
router.get("/auth", async (req, res) => {
try {
User.find({}, (err, users) => {
if (err) {
res.send({ message: "Something went really wrong" })
next()
}
res.json(users)
})
} catch (e) {
console.log(e)
res.send({ message: "Server error" })
}
})
module.exports = routerКод файлу auth.middleware.js
1. const jwt = require("jsonwebtoken")
2. const config = require("config")
3.
4. module.exports = (req, res, next) => {
5. if (req.method === "OPTIONS") {
6. return next()
7. }
8.
9. try {
10.
const token = req.headers.authorization.split(" ")[1]
11.
12.
if (!token) {
13.
return res.status(401).json({ message: "Auth error" })
14.
}
15.
16.
const decoded = jwt.verify(token, config.get("secretKey"))
17.
18.
req.user = decoded
19.
next()
20.
} catch (e) {
21.
return res.status(401).json({ message: "Auth error" })
22.
}
23.
}
Код файлу mushrom.routes.js
1. const Router = require("express")
2. const User = require("../models/User")
3. const snailBase = require("../models/snailBase")
4. const authMiddleware = require("../middleware/auth.middleware")
5. const path = require("path"),
6. { dirname } = require("path")
7. const { fileUrlToPath } = require("url")
8. const router = new Router()
9.
10.
router.post("/add", async (req, res) => {
11.
try {
12.
const { username, title, text, imgUrl } = req.body
13.
//const user = await User.findById(req.userId)
14.
15.
/*if (req.files) {
16.
let fileName = Date.now().toString() + req.files.image.name
17.
const __dirname = dirname(fileUrlToPath(meta.url))
18.
req.files.image.mv(path.join(__dirname, "..", "uploads",
fileName))
19.
20.
const newSnailBaseWithImg = new snailBase({
21.
username: user.email,
22.
title,
23.
text,
24.
imgUrl: fileName,
25.
})26.
await newSnailBaseWithImg.save()
await User.findByIdAndUpdate(req.user.id, {
$push: { snailBases: newSnailBaseWithImg },
})
return res.json(newSnailBaseWithImg)
}*/
const newSnailBaseWithoutImg = new snailBase({
username,
title,
text,
imgUrl,
})
await newSnailBaseWithoutImg.save()
/*await User.findByIdAndUpdate(req.userId, {
$push: { snailBases: newSnailBaseWithoutImg },
})*/
res.json({ message: "Snail base was created" })
} catch (e) {
res.json({ message: "Something went wrong" })
}
})
router.get("/getSnailBases", async (req, res) => {
try {
snailBase.find({}, (err, users) => {
if (err) {
res.send({ message: "Something went really wrong" })
next()
}
res.json(users)
})
} catch (e) {
console.log(e)
res.send({ message: "Server error" })
}
})
router.delete("/snailBase/:id", async (req, res) => {
try {
snailBase
.findByIdAndRemove(req.params.id)
.exec()
.then((dox) => {
if (!doc) {
return res.status(404).end()
}
return res.status(204).end()
})
.catch((err) => next(err))80.

res.json({ message: "Product was deleted" })
} catch (e) {
console.log(e)
res.send({ message: "Server error" })
}
})
module.exports = router
